AWSTemplateFormatVersion: 2010-09-09
Description: Running Elastic Inference - workshop template
<<<<<<< HEAD

=======
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
Mappings:
  CidrMappings:
    public-subnet:
      CIDR: 10.0.1.0/24
    vpc:
      CIDR: 10.0.0.0/16
<<<<<<< HEAD

=======
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
Metadata:
  Author:
    Description: Chakravarthy Nagarajan <chakravn@amazon.com>
  License:
    Description: >-
      Copyright 2019 Amazon.com, Inc. and its affiliates. All Rights Reserved.

      Licensed under the Amazon Software License (the "License"). You may not
      use this file except in compliance with the License. A copy of the License
      is located at

      http://aws.amazon.com/asl/

      or in the "license" file accompanying this file. This file is distributed
      on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
      express or implied. See the License for the specific language governing
      permissions and limitations under the License.
<<<<<<< HEAD

=======
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
Outputs:
  awsRegionId:
    Description: The AWS Region ID your template was launched in
    Value:
      Ref: 'AWS::Region'
<<<<<<< HEAD

=======
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
  publicSubnet:
    Description: Public subnet
    Value:
      Ref: publicSubnet
<<<<<<< HEAD

=======
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
  snsTopic:
    Description: SNS topic ARN
    Value:
      Ref: snsTopic
<<<<<<< HEAD

=======
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
  vpc:
    Description: The VPC
    Value:
      Ref: vpc
<<<<<<< HEAD

=======
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
  vpcEndpoint:
    Description: VPC Endpoint for EI accelerator
    Value:
      Ref: vpcEndpoint
<<<<<<< HEAD

=======
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
  eventRule:
    Description: Events rule
    Value:
      Ref: eventRule
<<<<<<< HEAD

=======
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
  snsTopic:
    Description: SNS topic ARN
    Value:
      Ref: snsTopic
<<<<<<< HEAD

=======
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
  instanceSecurityGroup:
    Description: Instance security group
    Value:
      Ref: instanceSecurityGroup
<<<<<<< HEAD

=======
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
  eventRule:
    Description: Events rule
    Value:
      Ref: eventRule
<<<<<<< HEAD

=======
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
  instanceProfile:
    Description: Instance profile ARN
    Value:
      Fn::GetAtt:
      - instanceProfile
      - Arn
<<<<<<< HEAD

  instanceRole:
    Description: Instance Role
    Value:
      Ref: instanceRole

=======
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
Parameters:
  sourceCidr:
    Default: 0.0.0.0/0
    Description: Optional - CIDR/IP range for instance ssh/http access access
    Type: String
<<<<<<< HEAD

=======
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
Resources:
  attachGateway:
    DependsOn:
      - vpc
      - internetGateway
    Properties:
      InternetGatewayId:
        Ref: internetGateway
      VpcId:
        Ref: vpc
    Type: 'AWS::EC2::VPCGatewayAttachment'
<<<<<<< HEAD

=======
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
  ec2FleetServiceLinkedRole:
    Properties:
      AWSServiceName: ec2fleet.amazonaws.com
      Description: Default EC2 Fleet Service Linked Role
    Type: 'AWS::IAM::ServiceLinkedRole'
<<<<<<< HEAD

=======
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
  eventRule:
    DependsOn:
    - snsTopic
    Properties:
      Description: Events rule for EC2 Spot Instance Interruption Notices
      EventPattern:
        detail-type:
        - EC2 Spot Instance Interruption Warning
        source:
        - aws.ec2
      State: ENABLED
      Targets:
      - Arn:
          Ref: snsTopic
        Id:
          Fn::GetAtt:
          - snsTopic
          - TopicName
    Type: AWS::Events::Rule
<<<<<<< HEAD

  instanceRole:
    Description: Instance Role for EI
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
=======
  instanceProfile:
    DependsOn:
      - instanceRole
    Properties:
      Path: /
      Roles:
        - Ref: "instanceRole"
    Type: "AWS::IAM::InstanceProfile"
  instanceRole:
    Properties:
      AssumeRolePolicyDocument:
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
<<<<<<< HEAD
      RoleName: "EI-Spot"
    Type: "AWS::IAM::Role"

  instancePolicy:
    Description: "Policy for Elastic Inference"
    Properties:
      ManagedPolicyName: "ec2-role-trust-policy"
=======
    Type: "AWS::IAM::Role"
  instancePolicy:
    Properties:
      PolicyName: "ec2-role-trust-policy"
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - 'elastic-inference:Connect'
              - 'iam:List*'
              - 'iam:Get*'
              - 'ec2:Describe*'
              - 'ec2:Get*'
            Resource: "*"
      Roles:
<<<<<<< HEAD
        - Ref: "instanceRole"
    Type: "AWS::IAM::ManagedPolicy"

  instanceProfile:
    Properties:
      Path: /
      Roles:
        - Ref: "instanceRole"
      InstanceProfileName: "EI-Spot"
    Type: "AWS::IAM::InstanceProfile"

=======
        -
          Ref: "instanceRole"
    Type: "AWS::IAM::Policy"
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
  instanceSecurityGroup:
    DependsOn:
      - vpc
    Properties:
      GroupDescription: Allow ssh (22)
      SecurityGroupIngress:
        - CidrIp:
            Ref: sourceCidr
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
<<<<<<< HEAD
        - CidrIp:
            Ref: sourceCidr
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Ref: vpc
    Type: 'AWS::EC2::SecurityGroup'

=======
      VpcId:
        Ref: vpc
    Type: 'AWS::EC2::SecurityGroup'
  instanceSecurityGroupIngress:
    DependsOn:
      - instanceSecurityGroup
    Properties:
      FromPort: 443
      ToPort: 443
      GroupId:
        Ref: instanceSecurityGroup
      IpProtocol: tcp
    Type: 'AWS::EC2::SecurityGroupIngress'
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
  vpcEndpoint:
    DependsOn:
      - vpc
      - publicSubnet
      - instanceSecurityGroup
    Properties:
      VpcId: !Ref vpc
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.elastic-inference.runtime'
      VpcEndpointType: 'Interface'
<<<<<<< HEAD
      PrivateDnsEnabled: true
=======
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
      SubnetIds:
        - Ref: publicSubnet
      SecurityGroupIds:
        - Ref: instanceSecurityGroup
    Type: AWS::EC2::VPCEndpoint
<<<<<<< HEAD

=======
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
  internetGateway:
    DependsOn:
      - vpc
    Type: 'AWS::EC2::InternetGateway'
<<<<<<< HEAD

=======
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
  publicSubnet:
    DependsOn: attachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
        - CidrMappings
        - public-subnet
        - CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Elastic Inference with EC2 Spot - public subnet
      VpcId:
        Ref: vpc
    Type: AWS::EC2::Subnet
<<<<<<< HEAD

=======
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
  publicRoute:
    DependsOn:
      - publicRouteTable
      - internetGateway
      - attachGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: internetGateway
      RouteTableId:
        Ref: publicRouteTable
    Type: 'AWS::EC2::Route'
<<<<<<< HEAD

=======
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
  publicRouteTable:
    DependsOn:
      - vpc
      - attachGateway
    Properties:
      Tags:
        - Key: Name
          Value: Elastic Inference with EC2 Spot - public route table
      VpcId:
        Ref: vpc
    Type: 'AWS::EC2::RouteTable'
<<<<<<< HEAD

  publicSubnet1RouteTableAssociation:
    DependsOn:
    - publicRouteTable
    - publicSubnet
    - attachGateway
    Properties:
      RouteTableId:
        Ref: publicRouteTable
      SubnetId:
        Ref: publicSubnet
    Type: AWS::EC2::SubnetRouteTableAssociation

=======
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
  snsTopic:
    Properties:
      DisplayName: SNS Topic for EC2 Spot Instance Interruption Notices
    Type: AWS::SNS::Topic
<<<<<<< HEAD

=======
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
  snsTopicPolicy:
    DependsOn:
    - snsTopic
    Properties:
      PolicyDocument:
        Id:
          Fn::GetAtt:
          - snsTopic
          - TopicName
        Statement:
        - Action: sns:Publish
          Effect: Allow
          Principal:
            Service:
            - events.amazonaws.com
          Resource:
            Ref: snsTopic
        Version: '2012-10-17'
      Topics:
      - Ref: snsTopic
    Type: AWS::SNS::TopicPolicy
<<<<<<< HEAD

=======
>>>>>>> a9b1aae82201851ad741900b32ddf8ec2436676d
  vpc:
    Properties:
      CidrBlock:
        'Fn::FindInMap':
          - CidrMappings
          - vpc
          - CIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: Elastic Inference with EC2 Spot - workshop template
    Type: 'AWS::EC2::VPC'
